// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account.sql

package db

import (
	"context"
)

const deleteAcc = `-- name: DeleteAcc :exec
DELETE FROM accounts
WHERE id = $1
`

func (q *Queries) DeleteAcc(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAcc, id)
	return err
}

const getAcc = `-- name: GetAcc :one
SELECT id, owner, balance, currency, created_at FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAcc(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAcc, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getAccForUpdate = `-- name: GetAccForUpdate :one
SELECT id, owner, balance, currency, created_at FROM accounts
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetAccForUpdate(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccForUpdate, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getAllAccs = `-- name: GetAllAccs :many
SELECT id, owner, balance, currency, created_at FROM accounts
ORDER BY id
`

func (q *Queries) GetAllAccs(ctx context.Context) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAllAccs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newAcc = `-- name: NewAcc :one
INSERT INTO accounts (
    owner, balance, currency
) VALUES (
    $1, $2, $3
) RETURNING id, owner, balance, currency, created_at
`

type NewAccParams struct {
	Owner    string `json:"owner"`
	Balance  int64  `json:"balance"`
	Currency string `json:"currency"`
}

func (q *Queries) NewAcc(ctx context.Context, arg NewAccParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, newAcc, arg.Owner, arg.Balance, arg.Currency)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const updateAcc = `-- name: UpdateAcc :one
UPDATE accounts
SET balance = $2
WHERE id = $1
RETURNING id, owner, balance, currency, created_at
`

type UpdateAccParams struct {
	ID      int64 `json:"id"`
	Balance int64 `json:"balance"`
}

func (q *Queries) UpdateAcc(ctx context.Context, arg UpdateAccParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAcc, arg.ID, arg.Balance)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const updateAccBalance = `-- name: UpdateAccBalance :one
UPDATE accounts
SET balance =  balance + $1
WHERE id = $2
RETURNING id, owner, balance, currency, created_at
`

type UpdateAccBalanceParams struct {
	Amount int64 `json:"amount"`
	ID     int64 `json:"id"`
}

func (q *Queries) UpdateAccBalance(ctx context.Context, arg UpdateAccBalanceParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccBalance, arg.Amount, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
