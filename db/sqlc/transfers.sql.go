// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transfers.sql

package db

import (
	"context"
	"database/sql"
)

const getAllTransfers = `-- name: GetAllTransfers :many
SELECT id, from_acc_id, to_acc_id, amount, created_at FROM transfers
WHERE
    from_acc_id=$1 OR
    to_acc_id=$2
`

type GetAllTransfersParams struct {
	FromAccID sql.NullInt64 `json:"from_acc_id"`
	ToAccID   sql.NullInt64 `json:"to_acc_id"`
}

func (q *Queries) GetAllTransfers(ctx context.Context, arg GetAllTransfersParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getAllTransfers, arg.FromAccID, arg.ToAccID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccID,
			&i.ToAccID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, from_acc_id, to_acc_id, amount, created_at FROM transfers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransfer(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccID,
		&i.ToAccID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const newTransfer = `-- name: NewTransfer :one
INSERT INTO transfers (
    from_acc_id, to_acc_id, amount
) VALUES (
     $1, $2, $3
) RETURNING id, from_acc_id, to_acc_id, amount, created_at
`

type NewTransferParams struct {
	FromAccID sql.NullInt64 `json:"from_acc_id"`
	ToAccID   sql.NullInt64 `json:"to_acc_id"`
	Amount    int64         `json:"amount"`
}

func (q *Queries) NewTransfer(ctx context.Context, arg NewTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, newTransfer, arg.FromAccID, arg.ToAccID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccID,
		&i.ToAccID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
