// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: entries.sql

package db

import (
	"context"
	"database/sql"
)

const getAllEntries = `-- name: GetAllEntries :many
SELECT id, acc_id, amount, created_at FROM entries
WHERE acc_id = $1
`

func (q *Queries) GetAllEntries(ctx context.Context, accID sql.NullInt64) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, getAllEntries, accID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntry = `-- name: GetEntry :one
SELECT id, acc_id, amount, created_at FROM entries
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntry(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const newEntry = `-- name: NewEntry :one
INSERT INTO entries (
    acc_id, amount
) VALUES (
    $1, $2
) RETURNING id, acc_id, amount, created_at
`

type NewEntryParams struct {
	AccID  sql.NullInt64 `json:"acc_id"`
	Amount int64         `json:"amount"`
}

func (q *Queries) NewEntry(ctx context.Context, arg NewEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, newEntry, arg.AccID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
